// Code generated by fastssz. DO NOT EDIT.
// Hash: bf0af0358455608406d75e88b42f6733f2953e08fc502fe12bdb1a3a125a09e7
package common

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the TopBidWebsocketStreamBid object
func (t *TopBidWebsocketStreamBid) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TopBidWebsocketStreamBid object to a target array
func (t *TopBidWebsocketStreamBid) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Timestamp'
	dst = ssz.MarshalUint64(dst, t.Timestamp)

	// Field (1) 'Slot'
	dst = ssz.MarshalUint64(dst, t.Slot)

	// Field (2) 'BlockNumber'
	dst = ssz.MarshalUint64(dst, t.BlockNumber)

	// Field (3) 'BlockHash'
	dst = append(dst, t.BlockHash[:]...)

	// Field (4) 'ParentHash'
	dst = append(dst, t.ParentHash[:]...)

	// Field (5) 'BuilderPubkey'
	dst = append(dst, t.BuilderPubkey[:]...)

	// Field (6) 'FeeRecipient'
	dst = append(dst, t.FeeRecipient[:]...)

	// Field (7) 'Value'
	dst = append(dst, t.Value[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the TopBidWebsocketStreamBid object
func (t *TopBidWebsocketStreamBid) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 188 {
		return ssz.ErrSize
	}

	// Field (0) 'Timestamp'
	t.Timestamp = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Slot'
	t.Slot = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'BlockNumber'
	t.BlockNumber = ssz.UnmarshallUint64(buf[16:24])

	// Field (3) 'BlockHash'
	copy(t.BlockHash[:], buf[24:56])

	// Field (4) 'ParentHash'
	copy(t.ParentHash[:], buf[56:88])

	// Field (5) 'BuilderPubkey'
	copy(t.BuilderPubkey[:], buf[88:136])

	// Field (6) 'FeeRecipient'
	copy(t.FeeRecipient[:], buf[136:156])

	// Field (7) 'Value'
	copy(t.Value[:], buf[156:188])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TopBidWebsocketStreamBid object
func (t *TopBidWebsocketStreamBid) SizeSSZ() (size int) {
	size = 188
	return
}

// HashTreeRoot ssz hashes the TopBidWebsocketStreamBid object
func (t *TopBidWebsocketStreamBid) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TopBidWebsocketStreamBid object with a hasher
func (t *TopBidWebsocketStreamBid) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Timestamp'
	hh.PutUint64(t.Timestamp)

	// Field (1) 'Slot'
	hh.PutUint64(t.Slot)

	// Field (2) 'BlockNumber'
	hh.PutUint64(t.BlockNumber)

	// Field (3) 'BlockHash'
	hh.PutBytes(t.BlockHash[:])

	// Field (4) 'ParentHash'
	hh.PutBytes(t.ParentHash[:])

	// Field (5) 'BuilderPubkey'
	hh.PutBytes(t.BuilderPubkey[:])

	// Field (6) 'FeeRecipient'
	hh.PutBytes(t.FeeRecipient[:])

	// Field (7) 'Value'
	hh.PutBytes(t.Value[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the TopBidWebsocketStreamBid object
func (t *TopBidWebsocketStreamBid) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(t)
}
